from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import MinValueValidator, MaxValueValidator
from django.core.exceptions import ValidationError
from datetime import date


# User
from django.contrib.auth.models import AbstractUser
from django.db import models
from django.contrib.auth.hashers import make_password

class SitamUser(AbstractUser):
    password = models.CharField(max_length=128)
    user_type = models.CharField(max_length=20, choices=[('student', 'Student'), ('faculty', 'Faculty'), ('admin', 'Admin')])
    course = models.ForeignKey('Course', on_delete=models.CASCADE, related_name="user_course", null=True, blank=True, default=None)
    branch = models.ForeignKey('Branch', on_delete=models.CASCADE, related_name="user_branch", null=True, blank=True, default=None)
    year = models.CharField(max_length=10, null=True, blank=True, default=None)
    is_registered = models.BooleanField(default=False)

    def __str__(self):
        return self.username

    def save(self, *args, **kwargs):
        if not self.pk:  
            self.password = make_password('sitam')
        super().save(*args, **kwargs)
    
    def clean(self):
        if self.user_type == 'student':
            if not self.course or not self.branch:
                raise ValidationError('Course and Branch are required for students.')
        elif self.user_type == 'faculty':
            if not self.course or not self.department:
                raise ValidationError('Course and Department are required for faculty.')
        elif self.user_type == 'admin':
            if not self.admin_role:
                raise ValidationError('Admin role is required for admins.')

# Student
class PreRegisteredStudent(models.Model):
    student_id = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=255)  # Added max_length attribute
    email = models.EmailField(unique=True)
    course = models.ForeignKey('Course', on_delete=models.CASCADE, related_name="student_course")
    branch = models.ForeignKey('Branch', on_delete=models.CASCADE, related_name="student_branch")
    admission_date = models.DateField(default=date.today)
    year = models.CharField(max_length=10, editable=False)
    regulation = models.ForeignKey('Regulation', on_delete=models.CASCADE, related_name="student_regulation")

    def __str__(self):
        return self.student_id

    def save(self, *args, **kwargs):
        self.year = self.calculate_year()
        super().save(*args, **kwargs)

    def calculate_year(self):
        current_year = date.today().year
        admission_year = self.admission_date.year
        return str(current_year - admission_year + 1)

class Course(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    year = models.IntegerField(default=1)

    def clean(self):
        super().clean()
        course_name = self.name.lower()
        if course_name == 'btech' and not (0 < self.year <= 4):
            raise ValidationError({'year': 'For B.Tech, year must be between 1 and 4.'})
        elif course_name == 'bba' and not (0 < self.year <= 3):
            raise ValidationError({'year': 'For BBA, year must be between 1 and 3.'})
        elif course_name == 'mba' and not (0 < self.year <= 2):
            raise ValidationError({'year': 'For MBA, year must be 1 and 2.'})

    def __str__(self):
        return self.name

class PersonalDetails(models.Model):
    student_id = models.ForeignKey(PreRegisteredStudent, on_delete=models.CASCADE, related_name="personal_details")
    GENDER_CHOICES = (
        ('M', 'Male'),
        ('F', 'Female'),
        ('O', 'Other'),
    )
    
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)    
    date_of_birth = models.DateField()
    percentage = models.CharField(max_length=20)
    mobile_number = models.CharField(max_length=10)
    email = models.EmailField()
    cv = models.FileField(upload_to='cv/', blank=True, null=True)
    resume = models.FileField(upload_to='resume/', blank=True, null=True)
    portfolio = models.URLField(blank=True, null=True)
    linkedin = models.URLField(blank=True, null=True)
    github = models.URLField(blank=True, null=True)
    github_projects = models.TextField(blank=True, null=True)

    def __str__(self):
        return f'{self.student_id.name} - {self.student_id.student_id}'

    @property
    def name(self):
        return self.student_id.name

    @property
    def roll_no(self):
        return self.student_id.student_id

class Semester(models.Model):
    semester = models.IntegerField(validators=[MinValueValidator(0), MaxValueValidator(8)], default=1)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='semester_course')

    def __str__(self):
        return f'Semester {self.semester}'

    def clean(self):
        super().clean()
        course_name = self.course.name.lower()
        if course_name == 'btech' and not (0 < self.semester <= 8):
            raise ValidationError({'semester': 'For B.Tech, semester must be between 1 and 8.'})
        elif course_name == 'bba' and not (0 < self.semester <= 6):
            raise ValidationError({'semester': 'For BBA, semester must be between 1 and 6.'})
        elif course_name == 'mba' and not (0 < self.semester <= 4):
            raise ValidationError({'semester': 'For MBA, semester must be between 1 and 4.'})

class Subject(models.Model):
    regulation = models.ForeignKey('Regulation', on_delete=models.CASCADE, related_name='subject_regulation')
    course = models.ForeignKey('Course', on_delete=models.CASCADE, related_name="subject_course")
    branch = models.ForeignKey('Branch', on_delete=models.CASCADE, related_name="subject_branch")
    semester = models.ForeignKey(Semester, on_delete=models.CASCADE, related_name='subjects')
    name = models.CharField(max_length=100)

    def __str__(self):
        return f'{self.name} (Semester {self.semester.semester})'

class SemesterCGPA(models.Model):
    student = models.ForeignKey(PersonalDetails, on_delete=models.CASCADE, related_name='semesters')
    semester = models.ForeignKey(Semester, on_delete=models.CASCADE, related_name='semester_gpa')
    sgpa = models.DecimalField(max_digits=4, decimal_places=2)
    credits = models.DecimalField(max_digits=5, decimal_places=2)
    external_marks = models.TextField(blank=True, null=True)
    internal_marks = models.TextField(blank=True, null=True)
    have_backlogs = models.BooleanField(default=False)
    backlogs_count = models.IntegerField(blank=True)
    backlogs = models.ForeignKey(Subject, on_delete=models.CASCADE, related_name='student_backlogs', null=True, blank=True)

    def __str__(self):
        return f'{self.student.name} - {self.semester}'

class Backlog(models.Model):
    student = models.ForeignKey(PersonalDetails, on_delete=models.CASCADE, related_name='backlogs')
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.subject)

class Regulation(models.Model):
    regulation = models.CharField(max_length=3)

    def __str__(self):
        return self.regulation

class Branch(models.Model):
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name="course_branch")
    branch = models.CharField(max_length=10, blank=True, default=None)

    def __str__(self):
        return self.branch

class Department(models.Model):
    name = models.CharField(max_length=10, blank=True, default=None)

    def __str__(self):
        return "Dept. of "+ self.name

# Faculty
class Faculty(SitamUser):
    faculty_id = models.CharField(max_length=100, unique=True)
    department = models.ForeignKey('Department', on_delete=models.CASCADE, related_name="faculty_department")

    def __str__(self):
        return self.username

    def get_students(self):
        return PreRegisteredStudent.objects.filter(branch=self.department)

    def get_all_details(self):
        students = self.get_students()
        faculty = Faculty.objects.filter(department=self.department)
        return students, faculty
    
class Admin(SitamUser):
    admin_role = models.CharField(max_length=20, choices=[('director', 'Director'), ('principal', 'Principal'), ('admin', 'Admin')])

    def __str__(self):
        return "Dept. of "+ self.admin_role